//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v14.5.0.0 (NJsonSchema v11.4.0.0 (Newtonsoft.Json v13.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------

/* eslint-disable */
// ReSharper disable InconsistentNaming

import { mergeMap as _observableMergeMap, catchError as _observableCatch } from 'rxjs/operators';
import { Observable, throwError as _observableThrow, of as _observableOf } from 'rxjs';
import { Injectable, Inject, Optional, InjectionToken } from '@angular/core';
import { HttpClient, HttpHeaders, HttpResponse, HttpResponseBase } from '@angular/common/http';

export const API_BASE_URL = new InjectionToken<string>('API_BASE_URL');

@Injectable({
    providedIn: 'root'
})
export class Client {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl ?? "";
    }

    /**
     * @return OK
     */
    csrf(): Observable<void> {
        let url_ = this.baseUrl + "/reservation/csrf";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            withCredentials: true,
            headers: new HttpHeaders({
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processCsrf(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processCsrf(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<void>;
                }
            } else
                return _observableThrow(response_) as any as Observable<void>;
        }));
    }

    protected processCsrf(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return _observableOf(null as any);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * @param body (optional) 
     * @return OK
     */
    notificationsMarkAsRead(body: ReadNotificationViewModel | undefined): Observable<void> {
        let url_ = this.baseUrl + "/Notifications/MarkAsRead";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            withCredentials: true,
            headers: new HttpHeaders({
                "Content-Type": "application/json",
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processNotificationsMarkAsRead(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processNotificationsMarkAsRead(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<void>;
                }
            } else
                return _observableThrow(response_) as any as Observable<void>;
        }));
    }

    protected processNotificationsMarkAsRead(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return _observableOf(null as any);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * @param from (optional) 
     * @param to (optional) 
     * @return OK
     */
    sessionsAll(from: Date | undefined, to: Date | undefined): Observable<GetSessionsResponseDto[]> {
        let url_ = this.baseUrl + "/reservation/sessions?";
        if (from === null)
            throw new globalThis.Error("The parameter 'from' cannot be null.");
        else if (from !== undefined)
            url_ += "from=" + encodeURIComponent(from ? "" + from.toISOString() : "") + "&";
        if (to === null)
            throw new globalThis.Error("The parameter 'to' cannot be null.");
        else if (to !== undefined)
            url_ += "to=" + encodeURIComponent(to ? "" + to.toISOString() : "") + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            withCredentials: true,
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processSessionsAll(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processSessionsAll(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<GetSessionsResponseDto[]>;
                }
            } else
                return _observableThrow(response_) as any as Observable<GetSessionsResponseDto[]>;
        }));
    }

    protected processSessionsAll(response: HttpResponseBase): Observable<GetSessionsResponseDto[]> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(GetSessionsResponseDto.fromJS(item));
            }
            else {
                result200 = null as any;
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * @param body (optional) 
     * @return OK
     */
    sessionsPOST(body: CreateSessionCommand | undefined): Observable<number> {
        let url_ = this.baseUrl + "/reservation/sessions";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            withCredentials: true,
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processSessionsPOST(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processSessionsPOST(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<number>;
                }
            } else
                return _observableThrow(response_) as any as Observable<number>;
        }));
    }

    protected processSessionsPOST(response: HttpResponseBase): Observable<number> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = resultData200 !== undefined ? resultData200 : null as any;
    
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * @param body (optional) 
     * @return OK
     */
    sessionsPATCH(id: number, body: UpdateSessionInfoCommand | undefined): Observable<void> {
        let url_ = this.baseUrl + "/reservation/sessions/{id}";
        if (id === undefined || id === null)
            throw new globalThis.Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            withCredentials: true,
            headers: new HttpHeaders({
                "Content-Type": "application/json",
            })
        };

        return this.http.request("patch", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processSessionsPATCH(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processSessionsPATCH(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<void>;
                }
            } else
                return _observableThrow(response_) as any as Observable<void>;
        }));
    }

    protected processSessionsPATCH(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return _observableOf(null as any);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * @param body (optional) 
     * @return OK
     */
    reservations(sessionId: number, body: AddReservationCommand | undefined): Observable<number> {
        let url_ = this.baseUrl + "/reservation/sessions/{sessionId}/reservations";
        if (sessionId === undefined || sessionId === null)
            throw new globalThis.Error("The parameter 'sessionId' must be defined.");
        url_ = url_.replace("{sessionId}", encodeURIComponent("" + sessionId));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            withCredentials: true,
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processReservations(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processReservations(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<number>;
                }
            } else
                return _observableThrow(response_) as any as Observable<number>;
        }));
    }

    protected processReservations(response: HttpResponseBase): Observable<number> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = resultData200 !== undefined ? resultData200 : null as any;
    
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * @param body (optional) 
     * @return OK
     */
    create(body: TenantApiModel | undefined): Observable<void> {
        let url_ = this.baseUrl + "/api/tenants/create";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            withCredentials: true,
            headers: new HttpHeaders({
                "Content-Type": "application/json",
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processCreate(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processCreate(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<void>;
                }
            } else
                return _observableThrow(response_) as any as Observable<void>;
        }));
    }

    protected processCreate(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return _observableOf(null as any);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * @param body (optional) 
     * @return OK
     */
    edit(body: TenantApiModel | undefined): Observable<void> {
        let url_ = this.baseUrl + "/api/tenants/edit";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            withCredentials: true,
            headers: new HttpHeaders({
                "Content-Type": "application/json",
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processEdit(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processEdit(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<void>;
                }
            } else
                return _observableThrow(response_) as any as Observable<void>;
        }));
    }

    protected processEdit(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return _observableOf(null as any);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * @return OK
     */
    disable(tenantName: string): Observable<void> {
        let url_ = this.baseUrl + "/api/tenants/disable/{tenantName}";
        if (tenantName === undefined || tenantName === null)
            throw new globalThis.Error("The parameter 'tenantName' must be defined.");
        url_ = url_.replace("{tenantName}", encodeURIComponent("" + tenantName));
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            withCredentials: true,
            headers: new HttpHeaders({
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processDisable(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processDisable(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<void>;
                }
            } else
                return _observableThrow(response_) as any as Observable<void>;
        }));
    }

    protected processDisable(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return _observableOf(null as any);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * @return OK
     */
    enable(tenantName: string): Observable<void> {
        let url_ = this.baseUrl + "/api/tenants/enable/{tenantName}";
        if (tenantName === undefined || tenantName === null)
            throw new globalThis.Error("The parameter 'tenantName' must be defined.");
        url_ = url_.replace("{tenantName}", encodeURIComponent("" + tenantName));
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            withCredentials: true,
            headers: new HttpHeaders({
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processEnable(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processEnable(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<void>;
                }
            } else
                return _observableThrow(response_) as any as Observable<void>;
        }));
    }

    protected processEnable(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return _observableOf(null as any);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * @return OK
     */
    remove(tenantName: string): Observable<void> {
        let url_ = this.baseUrl + "/api/tenants/remove/{tenantName}";
        if (tenantName === undefined || tenantName === null)
            throw new globalThis.Error("The parameter 'tenantName' must be defined.");
        url_ = url_.replace("{tenantName}", encodeURIComponent("" + tenantName));
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            withCredentials: true,
            headers: new HttpHeaders({
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processRemove(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processRemove(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<void>;
                }
            } else
                return _observableThrow(response_) as any as Observable<void>;
        }));
    }

    protected processRemove(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return _observableOf(null as any);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * @param body (optional) 
     * @return OK
     */
    setup(body: SetupApiViewModel | undefined): Observable<void> {
        let url_ = this.baseUrl + "/api/tenants/setup";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            withCredentials: true,
            headers: new HttpHeaders({
                "Content-Type": "application/json",
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processSetup(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processSetup(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<void>;
                }
            } else
                return _observableThrow(response_) as any as Observable<void>;
        }));
    }

    protected processSetup(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return _observableOf(null as any);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * @return OK
     */
    current(): Observable<void> {
        let url_ = this.baseUrl + "/reservation/users/current";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            withCredentials: true,
            headers: new HttpHeaders({
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processCurrent(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processCurrent(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<void>;
                }
            } else
                return _observableThrow(response_) as any as Observable<void>;
        }));
    }

    protected processCurrent(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return _observableOf(null as any);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }
}

export class AddReservationCommand implements IAddReservationCommand {
    firstname!: string | undefined;
    lastname!: string | undefined;
    attendeeCount!: number | undefined;
    email!: string | undefined;
    phoneNumber!: string | undefined;
    sessionId!: number;

    constructor(data?: IAddReservationCommand) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.firstname = _data["firstname"];
            this.lastname = _data["lastname"];
            this.attendeeCount = _data["attendeeCount"];
            this.email = _data["email"];
            this.phoneNumber = _data["phoneNumber"];
            this.sessionId = _data["sessionId"];
        }
    }

    static fromJS(data: any): AddReservationCommand {
        data = typeof data === 'object' ? data : {};
        let result = new AddReservationCommand();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["firstname"] = this.firstname;
        data["lastname"] = this.lastname;
        data["attendeeCount"] = this.attendeeCount;
        data["email"] = this.email;
        data["phoneNumber"] = this.phoneNumber;
        data["sessionId"] = this.sessionId;
        return data;
    }
}

export interface IAddReservationCommand {
    firstname: string | undefined;
    lastname: string | undefined;
    attendeeCount: number | undefined;
    email: string | undefined;
    phoneNumber: string | undefined;
    sessionId: number;
}

export class CreateSessionCommand implements ICreateSessionCommand {
    type!: SessionType;
    title!: string | undefined;
    description!: string | undefined;
    start!: Date;
    end!: Date;
    location!: string | undefined;
    capacity!: number | undefined;

    constructor(data?: ICreateSessionCommand) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.type = _data["type"];
            this.title = _data["title"];
            this.description = _data["description"];
            this.start = _data["start"] ? new Date(_data["start"].toString()) : undefined as any;
            this.end = _data["end"] ? new Date(_data["end"].toString()) : undefined as any;
            this.location = _data["location"];
            this.capacity = _data["capacity"];
        }
    }

    static fromJS(data: any): CreateSessionCommand {
        data = typeof data === 'object' ? data : {};
        let result = new CreateSessionCommand();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["type"] = this.type;
        data["title"] = this.title;
        data["description"] = this.description;
        data["start"] = this.start ? this.start.toISOString() : undefined as any;
        data["end"] = this.end ? this.end.toISOString() : undefined as any;
        data["location"] = this.location;
        data["capacity"] = this.capacity;
        return data;
    }
}

export interface ICreateSessionCommand {
    type: SessionType;
    title: string | undefined;
    description: string | undefined;
    start: Date;
    end: Date;
    location: string | undefined;
    capacity: number | undefined;
}

export class GetSessionsResponseDto implements IGetSessionsResponseDto {
    title!: string | undefined;
    description!: string | undefined;
    start!: Date;
    end!: Date;
    attendeeCount!: number;
    location!: string | undefined;
    capacity!: number;
    id!: number;
    type!: SessionType;

    constructor(data?: IGetSessionsResponseDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.title = _data["title"];
            this.description = _data["description"];
            this.start = _data["start"] ? new Date(_data["start"].toString()) : undefined as any;
            this.end = _data["end"] ? new Date(_data["end"].toString()) : undefined as any;
            this.attendeeCount = _data["attendeeCount"];
            this.location = _data["location"];
            this.capacity = _data["capacity"];
            this.id = _data["id"];
            this.type = _data["type"];
        }
    }

    static fromJS(data: any): GetSessionsResponseDto {
        data = typeof data === 'object' ? data : {};
        let result = new GetSessionsResponseDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["title"] = this.title;
        data["description"] = this.description;
        data["start"] = this.start ? this.start.toISOString() : undefined as any;
        data["end"] = this.end ? this.end.toISOString() : undefined as any;
        data["attendeeCount"] = this.attendeeCount;
        data["location"] = this.location;
        data["capacity"] = this.capacity;
        data["id"] = this.id;
        data["type"] = this.type;
        return data;
    }
}

export interface IGetSessionsResponseDto {
    title: string | undefined;
    description: string | undefined;
    start: Date;
    end: Date;
    attendeeCount: number;
    location: string | undefined;
    capacity: number;
    id: number;
    type: SessionType;
}

export class ReadNotificationViewModel implements IReadNotificationViewModel {
    messageId!: string;

    constructor(data?: IReadNotificationViewModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.messageId = _data["messageId"];
        }
    }

    static fromJS(data: any): ReadNotificationViewModel {
        data = typeof data === 'object' ? data : {};
        let result = new ReadNotificationViewModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["messageId"] = this.messageId;
        return data;
    }
}

export interface IReadNotificationViewModel {
    messageId: string;
}

export type SessionType = "Individual" | "Group";

export class SetupApiViewModel implements ISetupApiViewModel {
    name!: string;
    siteName!: string;
    databaseProvider!: string | undefined;
    connectionString!: string | undefined;
    tablePrefix!: string | undefined;
    userName!: string;
    email!: string;
    password!: string | undefined;
    recipeName!: string | undefined;
    recipe!: string | undefined;
    siteTimeZone!: string | undefined;
    schema!: string | undefined;

    constructor(data?: ISetupApiViewModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.name = _data["name"];
            this.siteName = _data["siteName"];
            this.databaseProvider = _data["databaseProvider"];
            this.connectionString = _data["connectionString"];
            this.tablePrefix = _data["tablePrefix"];
            this.userName = _data["userName"];
            this.email = _data["email"];
            this.password = _data["password"];
            this.recipeName = _data["recipeName"];
            this.recipe = _data["recipe"];
            this.siteTimeZone = _data["siteTimeZone"];
            this.schema = _data["schema"];
        }
    }

    static fromJS(data: any): SetupApiViewModel {
        data = typeof data === 'object' ? data : {};
        let result = new SetupApiViewModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name;
        data["siteName"] = this.siteName;
        data["databaseProvider"] = this.databaseProvider;
        data["connectionString"] = this.connectionString;
        data["tablePrefix"] = this.tablePrefix;
        data["userName"] = this.userName;
        data["email"] = this.email;
        data["password"] = this.password;
        data["recipeName"] = this.recipeName;
        data["recipe"] = this.recipe;
        data["siteTimeZone"] = this.siteTimeZone;
        data["schema"] = this.schema;
        return data;
    }
}

export interface ISetupApiViewModel {
    name: string;
    siteName: string;
    databaseProvider: string | undefined;
    connectionString: string | undefined;
    tablePrefix: string | undefined;
    userName: string;
    email: string;
    password: string | undefined;
    recipeName: string | undefined;
    recipe: string | undefined;
    siteTimeZone: string | undefined;
    schema: string | undefined;
}

export class TenantApiModel implements ITenantApiModel {
    description!: string | undefined;
    name!: string;
    category!: string | undefined;
    databaseProvider!: string | undefined;
    requestUrlPrefix!: string | undefined;
    requestUrlHost!: string | undefined;
    connectionString!: string | undefined;
    tablePrefix!: string | undefined;
    schema!: string | undefined;
    recipeName!: string | undefined;
    featureProfiles!: string[] | undefined;
    isNewTenant!: boolean;

    constructor(data?: ITenantApiModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.description = _data["description"];
            this.name = _data["name"];
            this.category = _data["category"];
            this.databaseProvider = _data["databaseProvider"];
            this.requestUrlPrefix = _data["requestUrlPrefix"];
            this.requestUrlHost = _data["requestUrlHost"];
            this.connectionString = _data["connectionString"];
            this.tablePrefix = _data["tablePrefix"];
            this.schema = _data["schema"];
            this.recipeName = _data["recipeName"];
            if (Array.isArray(_data["featureProfiles"])) {
                this.featureProfiles = [] as any;
                for (let item of _data["featureProfiles"])
                    this.featureProfiles!.push(item);
            }
            this.isNewTenant = _data["isNewTenant"];
        }
    }

    static fromJS(data: any): TenantApiModel {
        data = typeof data === 'object' ? data : {};
        let result = new TenantApiModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["description"] = this.description;
        data["name"] = this.name;
        data["category"] = this.category;
        data["databaseProvider"] = this.databaseProvider;
        data["requestUrlPrefix"] = this.requestUrlPrefix;
        data["requestUrlHost"] = this.requestUrlHost;
        data["connectionString"] = this.connectionString;
        data["tablePrefix"] = this.tablePrefix;
        data["schema"] = this.schema;
        data["recipeName"] = this.recipeName;
        if (Array.isArray(this.featureProfiles)) {
            data["featureProfiles"] = [];
            for (let item of this.featureProfiles)
                data["featureProfiles"].push(item);
        }
        data["isNewTenant"] = this.isNewTenant;
        return data;
    }
}

export interface ITenantApiModel {
    description: string | undefined;
    name: string;
    category: string | undefined;
    databaseProvider: string | undefined;
    requestUrlPrefix: string | undefined;
    requestUrlHost: string | undefined;
    connectionString: string | undefined;
    tablePrefix: string | undefined;
    schema: string | undefined;
    recipeName: string | undefined;
    featureProfiles: string[] | undefined;
    isNewTenant: boolean;
}

export class UpdateSessionInfoCommand implements IUpdateSessionInfoCommand {
    title!: string | undefined;
    description!: string | undefined;
    location!: string | undefined;
    capacity!: number;
    start!: Date;
    end!: Date;
    sessionId!: number;

    constructor(data?: IUpdateSessionInfoCommand) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.title = _data["title"];
            this.description = _data["description"];
            this.location = _data["location"];
            this.capacity = _data["capacity"];
            this.start = _data["start"] ? new Date(_data["start"].toString()) : undefined as any;
            this.end = _data["end"] ? new Date(_data["end"].toString()) : undefined as any;
            this.sessionId = _data["sessionId"];
        }
    }

    static fromJS(data: any): UpdateSessionInfoCommand {
        data = typeof data === 'object' ? data : {};
        let result = new UpdateSessionInfoCommand();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["title"] = this.title;
        data["description"] = this.description;
        data["location"] = this.location;
        data["capacity"] = this.capacity;
        data["start"] = this.start ? this.start.toISOString() : undefined as any;
        data["end"] = this.end ? this.end.toISOString() : undefined as any;
        data["sessionId"] = this.sessionId;
        return data;
    }
}

export interface IUpdateSessionInfoCommand {
    title: string | undefined;
    description: string | undefined;
    location: string | undefined;
    capacity: number;
    start: Date;
    end: Date;
    sessionId: number;
}

export class ApiException extends Error {
    override message: string;
    status: number;
    response: string;
    headers: { [key: string]: any; };
    result: any;

    constructor(message: string, status: number, response: string, headers: { [key: string]: any; }, result: any) {
        super();

        this.message = message;
        this.status = status;
        this.response = response;
        this.headers = headers;
        this.result = result;
    }

    protected isApiException = true;

    static isApiException(obj: any): obj is ApiException {
        return obj.isApiException === true;
    }
}

function throwException(message: string, status: number, response: string, headers: { [key: string]: any; }, result?: any): Observable<any> {
    if (result !== null && result !== undefined)
        return _observableThrow(result);
    else
        return _observableThrow(new ApiException(message, status, response, headers, null));
}

function blobToText(blob: any): Observable<string> {
    return new Observable<string>((observer: any) => {
        if (!blob) {
            observer.next("");
            observer.complete();
        } else {
            let reader = new FileReader();
            reader.onload = event => {
                observer.next((event.target as any).result);
                observer.complete();
            };
            reader.readAsText(blob);
        }
    });
}
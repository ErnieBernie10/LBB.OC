{
  "version": 3,
  "sources": ["src/app/pages/login/login.ts", "src/app/pages/login/login.html"],
  "sourcesContent": ["import { Component, inject } from '@angular/core';\nimport { FormBuilder, ReactiveFormsModule } from '@angular/forms';\nimport { LoginRequestSchema } from '../../api/schemas.gen';\nimport { buildValidations } from '../../validation/buildValidations';\nimport { AuthService } from '../../services/auth.service';\nimport { HttpErrorResponse } from '@angular/common/http';\nimport { Router } from '@angular/router';\nimport { FormInput } from '../../components/input-errors/form-input';\nimport { Alert } from '../../components/alert/alert';\nimport { InvalidPipe } from '../../pipes/invalid-pipe';\n\n@Component({\n  selector: 'app-login',\n  imports: [ReactiveFormsModule, FormInput, Alert, InvalidPipe],\n  templateUrl: './login.html',\n  styleUrl: './login.scss',\n})\nexport class Login {\n  private authService = inject(AuthService);\n  private formBuilder = new FormBuilder().nonNullable;\n  private router = inject(Router);\n  public loginForm = this.formBuilder.group({\n    email: ['', buildValidations('email', LoginRequestSchema)],\n    password: ['', buildValidations('password', LoginRequestSchema)],\n  });\n\n  public loading = false;\n  public error: string | null = null;\n  public success: boolean = false;\n\n  onSubmit() {\n    if (!this.loginForm.valid) {\n      this.loginForm.markAllAsDirty();\n      return;\n    }\n    const value = this.loginForm.getRawValue();\n    this.loading = true;\n\n    this.authService.login(value.email, value.password).subscribe({\n      error: (e: HttpErrorResponse) => {\n        this.loading = false;\n        this.success = false;\n        if (e.status === 401) {\n          this.error = 'Invalid email or password';\n          return;\n        }\n        this.error = 'Something went wrong. Please try again later.';\n      },\n      next: (response) => {\n        this.loading = false;\n        this.error = null;\n        this.success = true;\n        setTimeout(() => this.router.navigateByUrl('/'), 500);\n      },\n    });\n  }\n\n  public get email() {\n    return this.loginForm.get('email');\n  }\n\n  public get password() {\n    return this.loginForm.get('password');\n  }\n}\n", "<form [formGroup]=\"loginForm\" (ngSubmit)=\"onSubmit()\">\n  <app-input formControlName=\"email\" label=\"Email\">\n    <input id=\"email\" type=\"email\" placeholder=\"Email\" formControlName=\"email\" [attr.aria-invalid]=\"email | invalid\" />\n  </app-input>\n  <app-input formControlName=\"password\" label=\"Password\">\n    <input\n      id=\"password\"\n      type=\"password\"\n      placeholder=\"Password\"\n      formControlName=\"password\"\n      [attr.aria-invalid]=\"password | invalid\"\n    />\n  </app-input>\n  <button [attr.aria-busy]=\"loading\" type=\"submit\" [disabled]=\"loading\">Login</button>\n  @if (error) {\n    <app-alert [dismissible]=\"true\" type=\"danger\" [message]=\"error\"></app-alert>\n  }\n  @if (success) {\n    <app-alert [dismissible]=\"true\" type=\"success\" message=\"Login success!\"></app-alert>\n  }\n</form>\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACeI,IAAA,oBAAA,GAAA,aAAA,CAAA;;;;AAAW,IAAA,qBAAA,eAAA,IAAA,EAAoB,WAAA,OAAA,KAAA;;;;;AAG/B,IAAA,oBAAA,GAAA,aAAA,CAAA;;;AAAW,IAAA,qBAAA,eAAA,IAAA;;;ADDT,IAAO,QAAP,MAAO,OAAK;EACR,cAAc,OAAO,WAAW;EAChC,cAAc,IAAI,YAAW,EAAG;EAChC,SAAS,OAAO,MAAM;EACvB,YAAY,KAAK,YAAY,MAAM;IACxC,OAAO,CAAC,IAAI,iBAAiB,SAAS,kBAAkB,CAAC;IACzD,UAAU,CAAC,IAAI,iBAAiB,YAAY,kBAAkB,CAAC;GAChE;EAEM,UAAU;EACV,QAAuB;EACvB,UAAmB;EAE1B,WAAQ;AACN,QAAI,CAAC,KAAK,UAAU,OAAO;AACzB,WAAK,UAAU,eAAc;AAC7B;IACF;AACA,UAAM,QAAQ,KAAK,UAAU,YAAW;AACxC,SAAK,UAAU;AAEf,SAAK,YAAY,MAAM,MAAM,OAAO,MAAM,QAAQ,EAAE,UAAU;MAC5D,OAAO,CAAC,MAAwB;AAC9B,aAAK,UAAU;AACf,aAAK,UAAU;AACf,YAAI,EAAE,WAAW,KAAK;AACpB,eAAK,QAAQ;AACb;QACF;AACA,aAAK,QAAQ;MACf;MACA,MAAM,CAAC,aAAY;AACjB,aAAK,UAAU;AACf,aAAK,QAAQ;AACb,aAAK,UAAU;AACf,mBAAW,MAAM,KAAK,OAAO,cAAc,GAAG,GAAG,GAAG;MACtD;KACD;EACH;EAEA,IAAW,QAAK;AACd,WAAO,KAAK,UAAU,IAAI,OAAO;EACnC;EAEA,IAAW,WAAQ;AACjB,WAAO,KAAK,UAAU,IAAI,UAAU;EACtC;;qCA9CW,QAAK;EAAA;yEAAL,QAAK,WAAA,CAAA,CAAA,WAAA,CAAA,GAAA,OAAA,IAAA,MAAA,IAAA,QAAA,CAAA,CAAA,GAAA,YAAA,WAAA,GAAA,CAAA,mBAAA,SAAA,SAAA,OAAA,GAAA,CAAA,MAAA,SAAA,QAAA,SAAA,eAAA,SAAA,mBAAA,OAAA,GAAA,CAAA,mBAAA,YAAA,SAAA,UAAA,GAAA,CAAA,MAAA,YAAA,QAAA,YAAA,eAAA,YAAA,mBAAA,UAAA,GAAA,CAAA,QAAA,UAAA,GAAA,UAAA,GAAA,CAAA,QAAA,UAAA,GAAA,eAAA,SAAA,GAAA,CAAA,QAAA,WAAA,WAAA,kBAAA,GAAA,aAAA,CAAA,GAAA,UAAA,SAAA,eAAA,IAAA,KAAA;AAAA,QAAA,KAAA,GAAA;ACjBlB,MAAA,yBAAA,GAAA,QAAA,CAAA;AAA8B,MAAA,qBAAA,YAAA,SAAA,0CAAA;AAAA,eAAY,IAAA,SAAA;MAAU,CAAA;AAClD,MAAA,yBAAA,GAAA,aAAA,CAAA;AACE,MAAA,oBAAA,GAAA,SAAA,CAAA;;AACF,MAAA,uBAAA;AACA,MAAA,yBAAA,GAAA,aAAA,CAAA;AACE,MAAA,oBAAA,GAAA,SAAA,CAAA;;AAOF,MAAA,uBAAA;AACA,MAAA,yBAAA,GAAA,UAAA,CAAA;AAAsE,MAAA,iBAAA,GAAA,OAAA;AAAK,MAAA,uBAAA;AAC3E,MAAA,8BAAA,GAAA,8BAAA,GAAA,GAAA,aAAA,CAAA;AAGA,MAAA,8BAAA,IAAA,+BAAA,GAAA,GAAA,aAAA,CAAA;AAGF,MAAA,uBAAA;;;AApBM,MAAA,qBAAA,aAAA,IAAA,SAAA;AAEyE,MAAA,oBAAA,CAAA;;AAQzE,MAAA,oBAAA,CAAA;;AAG6C,MAAA,oBAAA,CAAA;AAAA,MAAA,qBAAA,YAAA,IAAA,OAAA;;AACjD,MAAA,oBAAA,CAAA;AAAA,MAAA,wBAAA,IAAA,QAAA,IAAA,EAAA;AAGA,MAAA,oBAAA;AAAA,MAAA,wBAAA,IAAA,UAAA,KAAA,EAAA;;oBDJU,qBAAmB,oBAAA,sBAAA,iBAAA,sBAAA,oBAAA,iBAAE,WAAW,OAAO,WAAW,GAAA,eAAA,EAAA,CAAA;;;sEAIjD,OAAK,CAAA;UANjB;uBACW,aAAW,SACZ,CAAC,qBAAqB,WAAW,OAAO,WAAW,GAAC,UAAA,+yBAAA,CAAA;;;;6EAIlD,OAAK,EAAA,WAAA,SAAA,UAAA,gCAAA,YAAA,GAAA,CAAA;AAAA,GAAA;",
  "names": []
}
